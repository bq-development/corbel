# This is the module default configuration values
# We should always add a default value for every possible configuration parameter.

# Dropwizard default ports
dw.http.port=8082
dw.http.adminPort=8083

# Cookie configuration
token.cookie.path=/

#ETag filter enabled
etag.enabled=true

# CORS settings
cors.enabled=true
cors.allowedOrigins=any

# Pagination settings
api.defaultPageSize=10
api.maxPageSize=50

# Custom filters enabled
filter.headersQueryParams.enabled=true
filter.queryParamsNotAllowedFilter.enabled=true
filter.queryParamsNotAllowedFilter.methods=PUT,POST

#Allow request without domain in uri filter configuration
filter.allowRequestWithoutDomainInUri.enabled=true
filter.allowRequestWithoutDomainInUri.endpoints=domain,client,email,group,scope,username,user

# Maximum time in millis a token can last since its issued time.
iam.auth.token.maxExpirationInMillis=3600000
# Maximum time in millis a refresh token can last since its issued time.
iam.auth.refreshToken.maxExpirationInSeconds=7889230
# Maximum time in millis a token can last since its issued time.
iam.auth.publicToken.maxExpirationInMillis=43200000

# MongoDB Configuration
iam.mongodb.host=${MONGO_PORT_27017_TCP_ADDR:localhost}
iam.mongodb.port=${MONGO_PORT_27017_TCP_PORT:27017}
iam.mongodb.autoConnectRetry=true
iam.mongodb.connectionsPerHost=20
iam.mongodb.connectTimeout=5000
iam.mongodb.cursorFinalizerEnabled=true
iam.mongodb.fsync=false
iam.mongodb.j=false
iam.mongodb.maxAutoConnectRetryTime=1000
iam.mongodb.maxWaitTime=5000
iam.mongodb.socketKeepAlive=true
iam.mongodb.socketTimeout=60000
iam.mongodb.threadsAllowedToBlockForConnectionMultiplier=4
iam.mongodb.w=1
iam.mongodb.wtimeout=0
iam.mongodb.slaveOk=true
# Uncomment this if you want to use a password for MongoDB
# iam.mongodb.username=
# iam.mongodb.password=

# URI used to JWT audience validation
iam.uri=http://iam.corbel.io
# When this is enabled an access token must be sent on the Authorization heather in order to access secure APIs
auth.enabled=true
# When this is enabled the access token must have permissions to perform operations in the url domain.
auth.checkDomain.enabled=true
# This defines the which access rules this system is interested in
auth.audience=${iam.uri}
# The auth realm is just a name given to the authentication mechanism
auth.realm=OAuth Access Token
# Defines the pattern of paths which are secure and requires authorization token
auth.unAuthenticatedPath=version|v.*/oauth/token
# Auth Redis connection
auth.redis.host=${REDIS_PORT_6379_TCP_ADDR:localhost}
auth.redis.port=${REDIS_PORT_6379_TCP_PORT:6379}
# Uncomment this if you want to use a password for Redis
# auth.redis.password=
# Maximum connections to Redis
auth.redis.maxTotal=50
# Maximum active connections to Redis instance
auth.redis.maxIdle=10
# Minimum number of idle connections to Redis - these can be seen as always open and ready to serve
auth.redis.minIdle=1
# Tests whether connection is dead when connection retrieval method is called
auth.redis.testOnBorrow=true
# Tests whether connection is dead when returning a connection to the pool
auth.redis.testOnReturn=true
# Tests whether connections are dead during idle periods
auth.redis.testWhileIdle=true
# Maximum number of connections to test in each idle check
auth.redis.numTestsPerEvictionRun=1
# Maximum time, in milliseconds, to wait for a resource when auth.redis.blockWhenExhausted is set to true
auth.redis.maxWaitMillis=5000
# Idle connection checking period
auth.redis.timeBetweenEvictionRunsMillis=60000
# Wait when connection pool is exhausted
auth.redis.blockWhenExhausted=true

# Cache for scopes (in minutes)
iam.cache.scopes.expiry=30

# Password used to sign JWT tokens
token.signatureKey=key

# Key for token signed by assets
assets.upgradeSignerKey=key

# Eventbus RabbitMQ Configuration
eventbus.rabbitmq.host=${RABBITMQ_PORT_5672_TCP_ADDR:localhost}
eventbus.rabbitmq.port=${RABBITMQ_PORT_5672_TCP_PORT:5672}
eventbus.rabbitmq.username=guest
eventbus.rabbitmq.password=guest
eventbus.rabbitmq.requestedHeartbeat=10
eventbus.rabbitmq.connectionTimeout=60000

# Options to RabbitMQ backoff on failed messages
rabbitmq.maxAttempts=3
rabbitmq.backoff.initialInterval=1000
rabbitmq.backoff.multiplier=2.0
rabbitmq.backoff.maxInterval=350000

# Eventbus configuration
eventbus.listener.name=iam
eventbus.maxAttempts=5
eventbus.backoff.initialInterval=1000
eventbus.backoff.multiplier=3.0
eventbus.backoff.maxInterval=350000
eventbus.exchange=eventbus.exchange

# User Reset Password Configuration
iam.token.resetPasswordTokenDurationInSec=7200000
iam.token.resetPasswordTokenScope=scope
email.resetPassword.clientUrl=url
email.resetPassword.notification=iam:email:reset